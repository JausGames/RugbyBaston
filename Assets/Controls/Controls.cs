//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""InGameActions"",
            ""id"": ""a4c9985d-36b8-4c04-9568-d502662b2037"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f7075ff2-dcc6-4ff5-99c2-d42a64980fbe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveStick"",
                    ""type"": ""Value"",
                    ""id"": ""3fed1ab2-b284-4b6d-93d3-3c71d2b7b25a"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""35d5e85a-5e50-4c03-bbbb-ba87c8b02e4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fight"",
                    ""type"": ""Button"",
                    ""id"": ""a2800dd6-32a2-487e-90f8-e84a55fd6094"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""7a173e16-0221-4102-adb6-2e27b7a871a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""488c7b97-100d-4796-b1d2-4d76f6087846"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""99dea809-bb1c-49c7-8ee7-06fb9778e6f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ba05f88f-a8db-4cae-b3cb-53eb83572b60"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""358b8441-df30-4008-aa9e-77bd44915bf1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""242d7580-4f18-4b8e-ba4e-42c643caa2d7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8798b3b8-f6bd-4f4d-b840-cef62a6d0867"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fb4ed531-f16a-4e35-b4bc-fc791d060139"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""95596d69-27bb-46f6-96cb-81c57156d938"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9145181b-c044-4744-addd-cc8f649832bb"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""392b9dfd-2d91-41f5-b579-ee494489ff96"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0902703b-064e-457f-8c28-9e17fca8c1bb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08b047d7-e75e-43fd-a9e4-3b487b8b9659"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de7cc40-c18a-4412-a53d-29539b046f06"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd304b6d-c1f7-4586-8c6e-34eccd17b23f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8a25adf-14ed-4724-9026-f801e20172c7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InGameActions
        m_InGameActions = asset.FindActionMap("InGameActions", throwIfNotFound: true);
        m_InGameActions_Move = m_InGameActions.FindAction("Move", throwIfNotFound: true);
        m_InGameActions_MoveStick = m_InGameActions.FindAction("MoveStick", throwIfNotFound: true);
        m_InGameActions_Run = m_InGameActions.FindAction("Run", throwIfNotFound: true);
        m_InGameActions_Fight = m_InGameActions.FindAction("Fight", throwIfNotFound: true);
        m_InGameActions_A = m_InGameActions.FindAction("A", throwIfNotFound: true);
        m_InGameActions_X = m_InGameActions.FindAction("X", throwIfNotFound: true);
        m_InGameActions_B = m_InGameActions.FindAction("B", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGameActions
    private readonly InputActionMap m_InGameActions;
    private IInGameActionsActions m_InGameActionsActionsCallbackInterface;
    private readonly InputAction m_InGameActions_Move;
    private readonly InputAction m_InGameActions_MoveStick;
    private readonly InputAction m_InGameActions_Run;
    private readonly InputAction m_InGameActions_Fight;
    private readonly InputAction m_InGameActions_A;
    private readonly InputAction m_InGameActions_X;
    private readonly InputAction m_InGameActions_B;
    public struct InGameActionsActions
    {
        private @Controls m_Wrapper;
        public InGameActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_InGameActions_Move;
        public InputAction @MoveStick => m_Wrapper.m_InGameActions_MoveStick;
        public InputAction @Run => m_Wrapper.m_InGameActions_Run;
        public InputAction @Fight => m_Wrapper.m_InGameActions_Fight;
        public InputAction @A => m_Wrapper.m_InGameActions_A;
        public InputAction @X => m_Wrapper.m_InGameActions_X;
        public InputAction @B => m_Wrapper.m_InGameActions_B;
        public InputActionMap Get() { return m_Wrapper.m_InGameActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActionsActions set) { return set.Get(); }
        public void SetCallbacks(IInGameActionsActions instance)
        {
            if (m_Wrapper.m_InGameActionsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnMove;
                @MoveStick.started -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnMoveStick;
                @MoveStick.performed -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnMoveStick;
                @MoveStick.canceled -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnMoveStick;
                @Run.started -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnRun;
                @Fight.started -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnFight;
                @Fight.performed -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnFight;
                @Fight.canceled -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnFight;
                @A.started -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnA;
                @X.started -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnX;
                @B.started -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnB;
                @B.performed -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnB;
                @B.canceled -= m_Wrapper.m_InGameActionsActionsCallbackInterface.OnB;
            }
            m_Wrapper.m_InGameActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MoveStick.started += instance.OnMoveStick;
                @MoveStick.performed += instance.OnMoveStick;
                @MoveStick.canceled += instance.OnMoveStick;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Fight.started += instance.OnFight;
                @Fight.performed += instance.OnFight;
                @Fight.canceled += instance.OnFight;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
                @B.started += instance.OnB;
                @B.performed += instance.OnB;
                @B.canceled += instance.OnB;
            }
        }
    }
    public InGameActionsActions @InGameActions => new InGameActionsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IInGameActionsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMoveStick(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnFight(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
    }
}
